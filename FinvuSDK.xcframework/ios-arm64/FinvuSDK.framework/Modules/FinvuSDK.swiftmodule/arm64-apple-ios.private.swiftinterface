// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FinvuSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import FinvuSDK
import Foundation
import OSLog
import Starscream
import Swift
import TrustKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AccountConsentFetchType : Swift.String {
  case oneTime
  case periodic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentLifeUnit : Swift.String {
  case month
  case year
  case day
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentMode : Swift.String {
  case query
  case view
  case store
  case stream
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentType : Swift.String, Swift.CaseIterable {
  case transactions
  case profile
  case summary
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FinvuSDK.ConsentType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [FinvuSDK.ConsentType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentFiType : Swift.String, Swift.CaseIterable {
  case aif
  case bonds
  case cis
  case cp
  case debentures
  case deposit
  case equities
  case etf
  case govtSecurities
  case idr
  case insurancePolicies
  case invit
  case mutualFunds
  case nps
  case other
  case recurringDeposit
  case reit
  case sip
  case termDeposit
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FinvuSDK.ConsentFiType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [FinvuSDK.ConsentFiType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public typealias CompletionHandlerWithData<T> = (T?, Foundation.NSError?) -> Swift.Void where T : ObjectiveC.NSObject
public typealias CompletionHandler = (Foundation.NSError?) -> Swift.Void
@objc(FinvuConsentReport) @objcMembers final public class ConsentReport : ObjectiveC.NSObject {
  @objc final public let report: Swift.String
  @objc public init(report: Swift.String)
  @objc deinit
}
@objc(FinvuHandleInfo) @objcMembers final public class HandleInfo : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc public init(userId: Swift.String)
  @objc deinit
}
@objc(FinvuForgotHandle) @objcMembers final public class ForgotHandle : ObjectiveC.NSObject {
  @objc final public let userIds: [Swift.String]
  @objc public init(userIds: [Swift.String])
  @objc deinit
}
@objc(FinvuLoginOtpReference) @objcMembers final public class LoginOtpReference : ObjectiveC.NSObject {
  @objc final public let reference: Swift.String
  @objc public init(reference: Swift.String)
  @objc deinit
}
@objc(FinvuLoginResponse) @objcMembers final public class FinvuLoginResponse : ObjectiveC.NSObject {
  final public let deviceBindingValid: Swift.Bool?
  public init(deviceBindingValid: Swift.Bool?)
  @objc deinit
}
@objc(FinvuDeviceBinding) @objcMembers final public class FinvuDeviceBinding : ObjectiveC.NSObject {
  @objc final public let secret: Swift.String
  @objc public init(secret: Swift.String)
  @objc deinit
}
@objc(FinvuConsentHandleStatusResponse) @objcMembers final public class ConsentHandleStatusResponse : ObjectiveC.NSObject {
  @objc final public let status: Swift.String
  @objc public init(status: Swift.String)
  @objc deinit
}
@objc(FinvuUserInfo) @objcMembers final public class UserInfo : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let mobileNumber: Swift.String
  @objc final public let emailId: Swift.String
  @objc public init(userId: Swift.String, mobileNumber: Swift.String, emailId: Swift.String)
  @objc deinit
}
@objc(FinvuConsentHistoryResponse) @objcMembers final public class ConsentHistoryResponse : ObjectiveC.NSObject {
  @objc final public let consentHistory: [FinvuSDK.ConsentHistory]
  @objc public init(consentHistory: [FinvuSDK.ConsentHistory])
  @objc deinit
}
@objc(FinvuConsentHistory) @objcMembers final public class ConsentHistory : ObjectiveC.NSObject {
  @objc final public let consentId: Swift.String
  @objc final public let consentTimestamp: Foundation.Date?
  @objc public init(consentId: Swift.String, consentTimestamp: Foundation.Date?)
  @objc deinit
}
@objc(FinvuAccountDataRequest) @objcMembers final public class AccountDataRequestResponse : ObjectiveC.NSObject {
  @objc final public let transactionId: Swift.String?
  @objc final public let timestamp: Foundation.Date?
  @objc final public let consentId: Swift.String?
  @objc final public let sessionId: Swift.String?
  @objc public init(transactionId: Swift.String, timestamp: Foundation.Date?, consentId: Swift.String, sessionId: Swift.String)
  @objc deinit
}
@objc(FinvuAccountDataFetchResponse) @objcMembers final public class AccountDataFetchResponse : ObjectiveC.NSObject {
  @objc final public let fipId: Swift.String
  @objc final public let decryptedInfo: [FinvuSDK.FIDecryptedDataInfo]
  @objc public init(fipId: Swift.String, decryptedInfo: [FinvuSDK.FIDecryptedDataInfo])
  @objc deinit
}
@objc(FinvuFIEncryptedDataView) @objcMembers final public class FIDecryptedDataInfo : ObjectiveC.NSObject {
  @objc final public let linkReferenceNumber: Swift.String
  @objc final public let accountReferenceNumber: Swift.String?
  @objc final public let maskedAccountNumber: Swift.String
  @objc final public let fiType: Swift.String?
  @objc final public let accountType: Swift.String?
  @objc final public let decryptedData: Swift.String
  @objc public init(linkReferenceNumber: Swift.String, accountReferenceNumber: Swift.String?, maskedAccountNumber: Swift.String, fiType: Swift.String?, accountType: Swift.String?, decryptedData: Swift.String)
  @objc deinit
}
@objc(FinvuFIPSearchResponse) @objcMembers final public class FIPSearchResponse : ObjectiveC.NSObject {
  @objc final public let searchOptions: [FinvuSDK.FIPInfo]
  @objc public init(searchOptions: [FinvuSDK.FIPInfo])
  @objc deinit
}
@objc(FinvuFIPInfo) @objcMembers final public class FIPInfo : ObjectiveC.NSObject {
  @objc final public let fipId: Swift.String
  @objc final public let productName: Swift.String?
  @objc final public let fipFitypes: [Swift.String]
  @objc final public let fipFsr: Swift.String?
  @objc final public let productDesc: Swift.String?
  @objc final public let productIconUri: Swift.String?
  @objc final public let enabled: Swift.Bool
  @objc public init(fipId: Swift.String, productName: Swift.String?, fipFitypes: [Swift.String], fipFsr: Swift.String?, productDesc: Swift.String?, productIconUri: Swift.String?, enabled: Swift.Bool)
  @objc deinit
}
@objc(FinvuFIPDetails) @objcMembers final public class FIPDetails : ObjectiveC.NSObject {
  @objc final public let fipId: Swift.String
  @objc final public let typeIdentifiers: [FinvuSDK.FIPFiTypeIdentifier]
  @objc public init(fipId: Swift.String, typeIdenifiers: [FinvuSDK.FIPFiTypeIdentifier])
  @objc deinit
}
@objc(FinvuFIPFiTypeIdentifier) @objcMembers final public class FIPFiTypeIdentifier : ObjectiveC.NSObject {
  @objc final public let fiType: Swift.String
  @objc final public let identifiers: [FinvuSDK.TypeIdentifier]
  @objc public init(fiType: Swift.String, identifiers: [FinvuSDK.TypeIdentifier])
  @objc deinit
}
@objc(FinvuTypeIdentifier) @objcMembers final public class TypeIdentifier : ObjectiveC.NSObject {
  @objc final public let category: Swift.String
  @objc final public let type: Swift.String
  @objc public init(category: Swift.String, type: Swift.String)
  @objc deinit
}
@objc(FinvuTypeIdentifierInfo) @objcMembers final public class TypeIdentifierInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let category: Swift.String
  @objc final public let type: Swift.String
  @objc final public let value: Swift.String
  @objc public init(category: Swift.String, type: Swift.String, value: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FinvuDiscoveredAccountsResponse) @objcMembers final public class DiscoveredAccountsResponse : ObjectiveC.NSObject {
  @objc final public let accounts: [FinvuSDK.DiscoveredAccountInfo]
  @objc public init(accounts: [FinvuSDK.DiscoveredAccountInfo])
  @objc deinit
}
@objc(FinvuDiscoveredAccountInfo) @objcMembers final public class DiscoveredAccountInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let accountType: Swift.String
  @objc final public let accountReferenceNumber: Swift.String
  @objc final public let maskedAccountNumber: Swift.String
  @objc final public let fiType: Swift.String
  @objc public init(accountType: Swift.String, accountReferenceNumber: Swift.String, maskedAccountNumber: Swift.String, fiType: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FinvuAccountLinkingRequestReference) @objcMembers final public class AccountLinkingRequestReference : ObjectiveC.NSObject {
  @objc final public let referenceNumber: Swift.String
  @objc public init(referenceNumber: Swift.String)
  @objc deinit
}
@objc(FinvuConfirmAccountLinkingInfo) @objcMembers final public class ConfirmAccountLinkingInfo : ObjectiveC.NSObject {
  @objc final public let linkedAccounts: [FinvuSDK.LinkedAccountInfo]
  @objc public init(linkedAccounts: [FinvuSDK.LinkedAccountInfo])
  @objc deinit
}
@objc(FinvuLinkedAccountInfo) @objcMembers final public class LinkedAccountInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let customerAddress: Swift.String
  @objc final public let linkReferenceNumber: Swift.String
  @objc final public let accountReferenceNumber: Swift.String
  @objc final public let status: Swift.String
  @objc public init(customerAddress: Swift.String, linkReferenceNumber: Swift.String, accountReferenceNumber: Swift.String, status: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FinvuLinkedAccountsReponse) @objcMembers final public class LinkedAccountsResponse : ObjectiveC.NSObject {
  @objc final public let linkedAccounts: [FinvuSDK.LinkedAccountDetailsInfo]?
  @objc public init(linkedAccounts: [FinvuSDK.LinkedAccountDetailsInfo]?)
  @objc deinit
}
@objc(FinvuLinkedAccountDetailsInfo) @objcMembers final public class LinkedAccountDetailsInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let userId: Swift.String
  @objc final public let fipId: Swift.String
  @objc final public let fipName: Swift.String
  @objc final public let maskedAccountNumber: Swift.String
  @objc final public let accountReferenceNumber: Swift.String
  @objc final public let linkReferenceNumber: Swift.String
  @objc final public let consentIdList: [Swift.String]?
  @objc final public let fiType: Swift.String
  @objc final public let accountType: Swift.String
  @objc final public let linkedAccountUpdateTimestamp: Foundation.Date?
  @objc final public let authenticatorType: Swift.String
  @objc public init(userId: Swift.String, fipId: Swift.String, fipName: Swift.String, maskedAccountNumber: Swift.String, accountReferenceNumber: Swift.String, linkReferenceNumber: Swift.String, consentIdList: [Swift.String]?, fiType: Swift.String, accountType: Swift.String, linkedAccountUpdateTimestamp: Foundation.Date?, authenticatorType: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FinvuFetchOfflineMessageResponse) @objcMembers final public class FetchOfflineMessageResponse : ObjectiveC.NSObject {
  @objc final public let messages: [FinvuSDK.OfflineMessageInfo]?
  @objc public init(messages: [FinvuSDK.OfflineMessageInfo]?)
  @objc deinit
}
@objc(FinvuOfflineMessageInfo) @objcMembers final public class OfflineMessageInfo : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let messageId: Swift.String
  @objc final public let messageAcked: Swift.String
  @objc final public let messageOriginator: Swift.String
  @objc final public let messageOriginatorName: Swift.String?
  @objc final public let messageText: Swift.String
  @objc final public let messageTimestamp: Swift.String
  @objc final public let messageType: Swift.String
  @objc final public let requestConsentId: Swift.String
  @objc final public let requestSessionId: Swift.String?
  @objc public init(userId: Swift.String, messageId: Swift.String, messageAcked: Swift.String, messageOriginator: Swift.String, messageOriginatorName: Swift.String?, messageText: Swift.String, messageTimestamp: Swift.String, messageType: Swift.String, requestConsentId: Swift.String, requestSessionId: Swift.String?)
  @objc deinit
}
@objc(FinvuConsentRequestDetailResponse) @objcMembers final public class ConsentRequestDetailResponse : ObjectiveC.NSObject {
  @objc final public let detail: FinvuSDK.ConsentRequestDetailInfo
  @objc public init(detail: FinvuSDK.ConsentRequestDetailInfo)
  @objc deinit
}
@objc(FinvuConsentRequestDetailInfo) @objcMembers final public class ConsentRequestDetailInfo : ObjectiveC.NSObject {
  @objc final public let consentId: Swift.String?
  @objc final public let consentHandle: Swift.String
  @objc final public let financialInformationUser: FinvuSDK.FinancialInformationEntityInfo
  @objc final public let consentPurposeInfo: FinvuSDK.ConsentPurposeInfo
  @objc final public let consentDisplayDescriptions: [Swift.String]
  @objc final public let consentDateTimeRange: FinvuSDK.DateTimeRange
  @objc final public let dataDateTimeRange: FinvuSDK.DateTimeRange
  @objc final public let consentDataLifePeriod: FinvuSDK.ConsentDataLifePeriod
  @objc final public let consentDataFrequency: FinvuSDK.ConsentDataFrequency
  @objc final public let statusLastUpdateTimestamp: Foundation.Date?
  @objc final public let fiTypes: [Swift.String]?
  @objc public init(consentId: Swift.String?, consentHandle: Swift.String, statusLastUpdateTimestamp: Foundation.Date?, financialInformationUser: FinvuSDK.FinancialInformationEntityInfo, consentPurposeInfo: FinvuSDK.ConsentPurposeInfo, consentDisplayDescriptions: [Swift.String], consentDateTimeRange: FinvuSDK.DateTimeRange, dataDateTimeRange: FinvuSDK.DateTimeRange, consentDataLifePeriod: FinvuSDK.ConsentDataLifePeriod, consentDataFrequency: FinvuSDK.ConsentDataFrequency, fiTypes: [Swift.String]?)
  @objc deinit
}
@objc(FinvuDateTimeRange) @objcMembers final public class DateTimeRange : ObjectiveC.NSObject {
  @objc final public let from: Foundation.Date
  @objc final public let to: Foundation.Date
  @objc public init(from: Foundation.Date, to: Foundation.Date)
  @objc deinit
}
@objc(FinvuConsentDataLifePeriod) @objcMembers final public class ConsentDataLifePeriod : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let unit: Swift.String
  @objc final public let value: Swift.Double
  @objc public init(unit: Swift.String, value: Swift.Double)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FinvuConsentDataFrequency) @objcMembers final public class ConsentDataFrequency : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let unit: Swift.String
  @objc final public let value: Swift.Double
  @objc public init(unit: Swift.String, value: Swift.Double)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(FinvuFinancialInformationUserInfo) @objcMembers final public class FinancialInformationEntityInfo : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc public init(id: Swift.String, name: Swift.String)
  @objc deinit
}
@objc(FinvuConsentPurposeInfo) @objcMembers final public class ConsentPurposeInfo : ObjectiveC.NSObject {
  @objc final public let code: Swift.String
  @objc final public let text: Swift.String
  @objc public init(code: Swift.String, text: Swift.String)
  @objc deinit
}
@objc(FinvuPendingConsentRequestsResponse) @objcMembers final public class PendingConsentRequestsResponse : ObjectiveC.NSObject {
  @objc final public let details: [FinvuSDK.ConsentRequestDetailInfo]
  @objc public init(details: [FinvuSDK.ConsentRequestDetailInfo])
  @objc deinit
}
@objc(FinvuProcessAccountConsentResponse) @objcMembers final public class ProcessAccountConsentResponse : ObjectiveC.NSObject {
  @objc final public let consentIntentId: Swift.String?
  @objc final public let consentsInfo: [FinvuSDK.FinvuConsentInfo]?
  @objc public init(consentIntentId: Swift.String?, consentsInfo: [FinvuSDK.FinvuConsentInfo]?)
  @objc deinit
}
@objc(FinvuConsentInfo) @objcMembers final public class FinvuConsentInfo : ObjectiveC.NSObject {
  @objc final public let fipId: Swift.String?
  @objc final public let consentId: Swift.String
  @objc public init(fipId: Swift.String?, consentId: Swift.String)
  @objc deinit
}
@objc(FinvuUserConsentResponse) @objcMembers final public class UserConsentResponse : ObjectiveC.NSObject {
  @objc final public let userConsents: [FinvuSDK.UserConsentInfo]
  @objc public init(userConsents: [FinvuSDK.UserConsentInfo])
  @objc deinit
}
@objc(FinvuUserConsentInfo) @objcMembers final public class UserConsentInfo : ObjectiveC.NSObject {
  @objc final public let consentIntentId: Swift.String
  @objc final public let consentIntentEntityId: Swift.String?
  @objc final public let consentIntentEntityName: Swift.String
  @objc final public let consentIdList: [Swift.String]
  @objc final public let consentIntentUpdateTimestamp: Foundation.Date
  @objc final public let consentPurposeText: Swift.String
  @objc final public let status: Swift.String?
  @objc public init(consentIntentId: Swift.String, consentIntentEntityId: Swift.String?, consentIntentEntityName: Swift.String, consentIdList: [Swift.String], consentIntentUpdateTimestamp: Foundation.Date, consentPurposeText: Swift.String, status: Swift.String?)
  @objc deinit
}
@objc(FinvuUserConsentInfoDetails) @objcMembers final public class UserConsentInfoDetails : ObjectiveC.NSObject {
  @objc final public let consentId: Swift.String
  @objc final public let consentIntentEntityId: Swift.String?
  @objc final public let consentIntentEntityName: Swift.String
  @objc final public let consentIdList: [Swift.String]
  @objc final public let consentIntentUpdateTimestamp: Foundation.Date
  @objc final public let consentPurposeText: Swift.String
  @objc final public let status: Swift.String?
  @objc public init(consentId: Swift.String, consentIntentEntityId: Swift.String?, consentIntentEntityName: Swift.String, consentIdList: [Swift.String], consentIntentUpdateTimestamp: Foundation.Date, consentPurposeText: Swift.String, status: Swift.String?)
  @objc deinit
}
@objc(FinvuEntityInfo) @objcMembers final public class EntityInfo : ObjectiveC.NSObject {
  @objc final public let entityId: Swift.String
  @objc final public let entityName: Swift.String
  @objc final public let entityIconUri: Swift.String?
  @objc final public let entityLogoUri: Swift.String?
  @objc final public let entityLogoWithNameUri: Swift.String?
  @objc public init(entityId: Swift.String, entityName: Swift.String, entityIconUri: Swift.String?, entityLogoUri: Swift.String?, entityLogoWithNameUri: Swift.String?)
  @objc deinit
}
@objc(FinvuUserConsentDetails) @objcMembers final public class UserConsentDetails : ObjectiveC.NSObject {
  @objc final public let consentHandle: Swift.String?
  @objc final public let consentId: Swift.String?
  @objc final public let consentStatus: Swift.String
  @objc final public let statusLastUpdateTimestamp: Foundation.Date?
  @objc final public let financialInformationProvider: FinvuSDK.FinancialInformationEntityInfo?
  @objc final public let financialInformationUser: FinvuSDK.FinancialInformationEntityInfo?
  @objc final public let consentPurposeInfo: FinvuSDK.ConsentPurposeInfo
  @objc final public let consentDisplayDescriptions: [Swift.String]
  @objc final public let consentDateTimeRange: FinvuSDK.DateTimeRange
  @objc final public let dataDateTimeRange: FinvuSDK.DateTimeRange
  @objc final public let consentDataLifePeriod: FinvuSDK.ConsentDataLifePeriod
  @objc final public let consentDataFrequency: FinvuSDK.ConsentDataFrequency
  @objc final public let accounts: [FinvuSDK.ConsentAccountDetails]
  final public let fiTypes: [Swift.String?]
  @objc final public let accountAggregator: FinvuSDK.AccountAggregator
  public init(consentHandle: Swift.String?, consentId: Swift.String?, consentStatus: Swift.String, financialInformationProvider: FinvuSDK.FinancialInformationEntityInfo?, financialInformationUser: FinvuSDK.FinancialInformationEntityInfo?, consentPurposeInfo: FinvuSDK.ConsentPurposeInfo, consentDisplayDescriptions: [Swift.String], consentDateTimeRange: FinvuSDK.DateTimeRange, dataDateTimeRange: FinvuSDK.DateTimeRange, consentDataLifePeriod: FinvuSDK.ConsentDataLifePeriod, consentDataFrequency: FinvuSDK.ConsentDataFrequency, accounts: [FinvuSDK.ConsentAccountDetails], fiTypes: [Swift.String?], accountAggregator: FinvuSDK.AccountAggregator, statusLastUpdateTimestamp: Foundation.Date?)
  @objc deinit
}
@objc(FinvuConsentAccountDetails) @objcMembers final public class ConsentAccountDetails : ObjectiveC.NSObject {
  @objc final public let fiType: Swift.String
  @objc final public let fipId: Swift.String
  @objc final public let accountType: Swift.String
  @objc final public let accountReferenceNumber: Swift.String?
  @objc final public let maskedAccountNumber: Swift.String
  @objc final public let linkReferenceNumber: Swift.String
  @objc public init(fiType: Swift.String, fipId: Swift.String, accountType: Swift.String, accountReferenceNumber: Swift.String?, maskedAccountNumber: Swift.String, linkReferenceNumber: Swift.String)
  @objc deinit
}
@objc(FinvuFIPReference) @objcMembers final public class FIPReference : ObjectiveC.NSObject {
  @objc public init(fipId: Swift.String, fipName: Swift.String)
  @objc deinit
}
@objc(FinvuAccountAggregator) @objcMembers final public class AccountAggregator : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc public init(id: Swift.String)
  @objc deinit
}
@objc public protocol FinvuConfig {
  @objc var finvuEndpoint: Foundation.URL { get }
  @objc var certificatePins: [Swift.String]? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class FinvuManager : ObjectiveC.NSObject {
  @objc public static var shared: FinvuSDK.FinvuManager
  @objc final public func setCompletionDispatchQueue(queue: Dispatch.DispatchQueue)
  @objc final public func initializeWith(config: any FinvuSDK.FinvuConfig)
  @objc final public func connect(completion: @escaping FinvuSDK.CompletionHandler)
  @objc final public func disconnect()
  @objc final public func isConnected() -> Swift.Bool
  @objc final public func hasSession() -> Swift.Bool
  @objc final public func loginWith(username: Swift.String?, mobileNumber: Swift.String?, consentHandleId: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.LoginOtpReference>)
  @objc final public func verifyLoginOtp(otp: Swift.String, otpReference: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.HandleInfo>)
  @objc final public func initiateMobileVerification(mobileNumber: Swift.String, completion: @escaping FinvuSDK.CompletionHandler)
  @objc final public func completeMobileVerification(mobileNumber: Swift.String, otp: Swift.String, completion: @escaping FinvuSDK.CompletionHandler)
  @objc final public func fetchLinkedAccounts(completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.LinkedAccountsResponse>)
  @objc final public func discoverAccounts(fipId: Swift.String, fiTypes: [Swift.String], identifiers: [FinvuSDK.TypeIdentifierInfo], completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.DiscoveredAccountsResponse>)
  @objc final public func discoverAccountsAsync(fipId: Swift.String, fiTypes: [Swift.String], identifiers: [FinvuSDK.TypeIdentifierInfo], completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.DiscoveredAccountsResponse>)
  @objc final public func linkAccounts(fipDetails: FinvuSDK.FIPDetails, accounts: [FinvuSDK.DiscoveredAccountInfo], completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.AccountLinkingRequestReference>)
  @objc final public func confirmAccountLinking(linkingReference: FinvuSDK.AccountLinkingRequestReference, otp: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.ConfirmAccountLinkingInfo>)
  @objc final public func getConsentRequestDetails(consentHandleId: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.ConsentRequestDetailResponse>)
  @objc final public func approveAccountConsentRequest(consentDetail: FinvuSDK.ConsentRequestDetailInfo, linkedAccounts: [FinvuSDK.LinkedAccountDetailsInfo], completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.ProcessAccountConsentResponse>)
  @objc final public func denyAccountConsentRequest(consentDetail: FinvuSDK.ConsentRequestDetailInfo, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.ProcessAccountConsentResponse>)
  @objc final public func revokeConsent(consent: FinvuSDK.UserConsentInfoDetails, accountAggregator: FinvuSDK.AccountAggregator?, fipDetails: FinvuSDK.FIPReference?, completion: @escaping FinvuSDK.CompletionHandler)
  @objc final public func getConsentHandleStatus(handleId: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.ConsentHandleStatusResponse>)
  @objc final public func fipsAllFIPOptions(completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.FIPSearchResponse>)
  @objc final public func fetchFIPDetails(fipId: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.FIPDetails>)
  @objc final public func getEntityInfo(entityId: Swift.String, entityType: Swift.String, completion: @escaping FinvuSDK.CompletionHandlerWithData<FinvuSDK.EntityInfo>)
  @objc final public func logout(completion: @escaping FinvuSDK.CompletionHandler)
  @objc deinit
}
extension FinvuSDK.AccountConsentFetchType : Swift.Equatable {}
extension FinvuSDK.AccountConsentFetchType : Swift.Hashable {}
extension FinvuSDK.AccountConsentFetchType : Swift.RawRepresentable {}
extension FinvuSDK.ConsentLifeUnit : Swift.Equatable {}
extension FinvuSDK.ConsentLifeUnit : Swift.Hashable {}
extension FinvuSDK.ConsentLifeUnit : Swift.RawRepresentable {}
extension FinvuSDK.ConsentMode : Swift.Equatable {}
extension FinvuSDK.ConsentMode : Swift.Hashable {}
extension FinvuSDK.ConsentMode : Swift.RawRepresentable {}
extension FinvuSDK.ConsentType : Swift.Equatable {}
extension FinvuSDK.ConsentType : Swift.Hashable {}
extension FinvuSDK.ConsentType : Swift.RawRepresentable {}
extension FinvuSDK.ConsentFiType : Swift.Equatable {}
extension FinvuSDK.ConsentFiType : Swift.Hashable {}
extension FinvuSDK.ConsentFiType : Swift.RawRepresentable {}
